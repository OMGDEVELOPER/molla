{% schema %}
{
  "name": "Installers",
  "tag": "section",
  "class": "installers-section",
  "settings": [
    {
      "type": "metaobject_list",
      "metaobject_type": "installers",
      "id": "installers_list",
      "label": "Select Installers"
    }
  ],
  "presets": [
    {
      "name": "Installers",
      "category": "Metaobjects"
    }
  ]
}
{% endschema %}

{{ 'installers.css' | asset_url | stylesheet_tag }}
{{ 'https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/splide.min.css' | stylesheet_tag }}
<script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"></script>
<section class="installer-filters">
  <div class="container">
    <div class="row align-items-center">
      <!-- Tag Filters -->
      <div class="col-md-8">
        <div class="btn-group tag-filters-wrapper" role="group" aria-label="Tag filters">
          <button type="button" class="tag-filter-btn active tag-filter-all" data-tag="all">All</button>
          {% assign all_tags = '' %}
          {% for item in section.settings.installers_list %}
            {% for tag in item.tags.value %}
              {% unless all_tags contains tag %}
                {% assign all_tags = all_tags | append: tag | append: ',' %}
              {% endunless %}
            {% endfor %}
          {% endfor %}
          {% assign unique_tags = all_tags | split: ',' | uniq %}
          {% for tag in unique_tags %}
            {% if tag != blank %}
              <button type="button" class="tag-filter-btn" data-tag="{{ tag | escape }}">{{ tag }}</button>
            {% endif %}
          {% endfor %}
        </div>
      </div>
      <!-- Search -->
      <div class="col-md-4">
        <div class="input-group">
          <input type="text" id="installerSearch" class="form-control" placeholder="Search">
        </div>
      </div>
    </div>
  </div>
</section>
<div class="grid grid-cols-3 container" id="installerGrid">
  {% for item in section.settings.installers_list %}
    <div class="item" data-index="{{ forloop.index0 }}">
      <div class="featured-img">
        <a href="{{ item.system.url  }}">
          {{
            item.featured_image
            | image_url: width: item.featured_image.width
            | image_tag: alt: item.featured_image.alt
          }}
        </a>
      </div>
      <div class="installer-details">
        <div class="title">{{ item.title }}</div>
        <div class="tags">
          {% for tag in item.tags.value %}
            <span class="tag">{{ tag }}</span>
            {%- unless forloop.last %}, {% endunless %}
          {% endfor %}
        </div>
        <div class="details">
          <ul>
            <li>
              <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/location_on.png?v=1754363429">
              <span>{{ item.address }}</span>
            </li>
            <li>
              <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/user.svg?v=1756295623">
              <span><a href="mailto:{{ item.author }}">{{ item.author }}</a></span>
            </li>
            <li>
              <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/call.png?v=1754363436">
              <span><a href="tel:{{ item.phone }}">{{ item.phone }}</a></span>
            </li>
          </ul>
        </div>
        <div class="cta">
          <a href="#" class="open-modal" data-index="{{ forloop.index0 }}">View large images</a>
        </div>
      </div>
    </div>
  {% endfor %}
</div>
<!-- Load More Button -->
<div class="load-more-container text-center">
  <button id="loadMoreBtn" class="btn">Load More</button>
</div>
<!-- Modal -->
<div id="installer-modal" class="installer-modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close">&times;</button>
    <div id="installer-splide" class="splide">
      <div class="splide__track">
        <ul class="splide__list">
          {% for item in section.settings.installers_list %}
            <li class="splide__slide">
              <div class="modal-slide-content">
                <div class="featured-img">
                {{ item.featured_image | image_url: width: 800 | image_tag: alt: item.featured_image.alt }}
                </div>
                <div class="modal-box-content">
                  <div class="heading_content">
                  <h3 class="title">{{ item.title }}</h3>
                  <button>{{item.tags.value.first}}</button>
                  </div>
                  <div class="details">
                    <ul>
                      <li>
                        <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/location_on.png?v=1754363429">
                        <span>{{ item.address }}</span>
                      </li>
                      <li>
                        <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/user.svg?v=1756295623">
                        <span><a href="mailto:{{ item.author }}">{{ item.author }}</a></span>
                      </li>
                      <li>
                        <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/call.png?v=1754363436">
                        <span><a href="tel:{{ item.phone }}">{{ item.phone }}</a></span>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
              {% comment %}  {% endcomment %}
              <div class="item-gallery">
              {% for img in item.gallery.value %}
                <img src="{{ img | image_url }}" alt="{{ img.alt | escape }}" class="gallery-thumb">
              {% endfor %}
              </div>
            
            </li>
          {% endfor %}
        </ul>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const modal = document.getElementById('installer-modal');
  const closeBtn = modal.querySelector('.modal-close');
  const overlay = modal.querySelector('.modal-overlay');
  const installerItems = document.querySelectorAll('#installerGrid .item');
  const loadMoreBtn = document.getElementById('loadMoreBtn');
  const tagButtons = document.querySelectorAll('.tag-filter-btn');
  const searchInput = document.getElementById('installerSearch');
  let splide;

  // Pagination variables
  const itemsPerPage = 3;
  let currentPage = 1;

  /**
   * MODAL FUNCTIONS
   */
  function openModal(index) {
    modal.classList.remove('hidden');
    if (splide) splide.destroy();
    splide = new Splide('#installer-splide', {
      type: 'loop',
      perPage: 1,
      pagination: true,
      arrows: true,
      start: index,
    }).mount();
    setImageGalleryimg();
  }

  function closeModal() {
    modal.classList.add('hidden');
  }

  function initModal() {
    document.querySelectorAll('.open-modal').forEach((btn) => {
      btn.addEventListener('click', function () {
        const index = parseInt(this.dataset.index, 10);
        openModal(index);
        
      });
    });
    [closeBtn, overlay].forEach((el) =>
      el.addEventListener('click', closeModal)
    );
  }

  /**
   * PAGINATION FUNCTIONS
   */
  function updatePagination(visibleItems) {
    const maxVisible = currentPage * itemsPerPage;

    installerItems.forEach((item) => (item.style.display = 'none'));

    visibleItems.forEach((item, index) => {
      if (index < maxVisible) {
        item.style.display = 'block';
      }
    });

    if (maxVisible >= visibleItems.length) {
      loadMoreBtn.style.display = 'none';
    } else {
      loadMoreBtn.style.display = 'inline-block';
    }
  }

  function initPagination() {
    loadMoreBtn.addEventListener('click', () => {
      currentPage++;
      applyFilters();
    });
  }

  /**
   * FILTER FUNCTIONS
   */
  function resetSearch() {
    searchInput.value = '';
  }

  function applyFilters() {
    const query = searchInput.value.toLowerCase();
    const selectedTag = document.querySelector('.tag-filter-btn.active')?.dataset.tag || 'all';

    const visibleItems = Array.from(installerItems).filter((item) => {
      const title = item.querySelector('.title').textContent.toLowerCase();
      const tags = item.querySelector('.tags').textContent.toLowerCase();

      const matchesTag = selectedTag === 'all' ||
        Array.from(item.querySelectorAll('.tags .tag'))
          .map((t) => t.textContent.trim())
          .includes(selectedTag);

      const matchesSearch = title.includes(query) || tags.includes(query);

      return matchesTag && matchesSearch;
    });

    updatePagination(visibleItems);
  }

  function initFilters() {
    // Tag filtering
    tagButtons.forEach((btn) => {
      btn.addEventListener('click', () => {
        tagButtons.forEach((b) => b.classList.remove('active'));
        btn.classList.add('active');
        currentPage = 1;
        resetSearch(); // clear search when a tag is clicked
        applyFilters();
      });
    });

    // Search filtering
    searchInput.addEventListener('keyup', () => {
      currentPage = 1;
      applyFilters();
    });
  }
   let imgGalleryItems = document.querySelectorAll('item-gallery img');
    let installerImgElement = document.querySelector('.featured-img img');
    console.log(imgGalleryItems)
  function setImageGalleryimg(){
    let imgGalleryItems = document.querySelectorAll('item-gallery img');
    let installerImgElement = document.querySelector('.featured-img img');
    console.log(imgGalleryItems)
    imgGalleryItems.forEach(function(item){
      item.addEventListener('click',function(){
        let imgSrc = item.getAttribute('src');
        installerImgElement.setAttribute('src',imgSrc);
        installerImgElement.setAttribute('srcset',imgSrc);
      })
    })
  }

  /**
   * INIT ALL
   */
  function init() {
    installerItems.forEach((item) => (item.dataset.visible = 'true'));
    initModal();
    initPagination();
    initFilters();
    applyFilters(); // initial state
  }

  init();
});
</script>

}