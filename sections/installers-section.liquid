{% schema %}
{
  "name": "Installers",
  "tag": "section",
  "class": "installers-section",
  "settings": [
    {
      "type": "metaobject_list",
      "metaobject_type": "installers",
      "id": "installers_list",
      "label": "Select Installers"
    }
  ],
  "presets": [
    {
      "name": "Installers",
      "category": "Metaobjects"
    }
  ]
}
{% endschema %}

{{ 'installers.css' | asset_url | stylesheet_tag }}
{{ 'https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/splide.min.css' | stylesheet_tag }}
<script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"></script>

<section class="installer-filters">
  <div class="container">
    <div class="row align-items-center">
      <!-- Tag Filters -->
      <div class="col-md-8">
        <div class="btn-group" role="group" aria-label="Tag filters">
          <button type="button" class="tag-filter-btn active tag-filter-all" data-tag="all">All</button>
          {% assign all_tags = "" %}
          {% for item in section.settings.installers_list %}
            {% for tag in item.tags.value %}
              {% unless all_tags contains tag %}
                {% assign all_tags = all_tags | append: tag | append: "," %}
              {% endunless %}
            {% endfor %}
          {% endfor %}
          {% assign unique_tags = all_tags | split: "," | uniq %}
          {% for tag in unique_tags %}
            {% if tag != blank %}
              <button type="button" class="tag-filter-btn" data-tag="{{ tag | escape }}">{{ tag }}</button>
            {% endif %}
          {% endfor %}
        </div>
      </div>

      <!-- Search -->
      <div class="col-md-4">
        <div class="input-group">
          <input type="text" id="installerSearch" class="form-control" placeholder="Search">
        </div>
      </div>

    </div>
  </div>
</section>

<div class="grid grid-cols-3 container installers-grid">
  {% paginate section.settings.installers_list by 6 %}
    {% for item in section.settings.installers_list %}
      <div class="item">
        <div class="featured-img">
          <a class="open-modal" 
            data-images='[{% for img in item.gallery.value %}{"src":"{{ img | image_url }}","alt":"{{ img.alt | escape }}" }{% unless forloop.last %},{% endunless %}{% endfor %}]'>
            {{ item.featured_image | image_url: width: item.featured_image.width | image_tag: alt: item.featured_image.alt }}
          </a>
        </div>
        <div class="installer-details">
          <div class="title">{{ item.title }}</div>
          <div class="tags">
            {% for tag in item.tags.value %}
              <span class="tag">{{ tag }}</span>
              {%- unless forloop.last %}, {% endunless %}
            {% endfor %}
          </div>
          <div class="details">
            <ul>
              <li>
                <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/location_on.png?v=1754363429">
                <span>{{ item.address }}</span>
              </li>
              <li>
                <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/user.svg?v=1756295623">
                <span><a href="mailto:{{ item.author }}">{{ item.author }}</a></span>
              </li>
              <li>
                <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/call.png?v=1754363436">
                <span><a href="tel:{{ item.phone }}">{{ item.phone }}</a></span>
              </li>
            </ul>
          </div>
          <div class="cta">
            <a href="/pages/installers/{{ item.title | handleize }}">View large images</a>
          </div>
        </div>
      </div>
    {% endfor %}

    {% if paginate.next %}
      <div class="load-more-container text-center my-4">
        <button id="loadMore" class="btn btn-primary" data-next="{{ paginate.next.url }}">Load More</button>
      </div>
    {% endif %}
  {% endpaginate %}
</div>

<!-- Modal -->
<div id="installer-modal" class="installer-modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close">&times;</button>
    <div id="installer-splide" class="splide">
      <div class="splide__track">
        <ul class="splide__list"></ul>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  // Splide modal setup
  const modal = document.getElementById('installer-modal');
  const closeBtn = modal.querySelector('.modal-close');
  const overlay = modal.querySelector('.modal-overlay');
  const splideList = modal.querySelector('.splide__list');
  let splide;

  function bindModalEvents(scope = document) {
    scope.querySelectorAll('.open-modal').forEach(btn => {
      btn.addEventListener('click', function () {
        const images = JSON.parse(this.dataset.images);
        splideList.innerHTML = '';
        images.forEach(img => {
          splideList.innerHTML += `
            <li class="splide__slide">
              <img src="${img.src}" alt="${img.alt || ''}" />
            </li>`;
        });
        modal.classList.remove('hidden');
        if (splide) splide.destroy();
        splide = new Splide('#installer-splide', {
          type: 'loop',
          perPage: 1,
          pagination: true,
          arrows: true,
        }).mount();
      });
    });
  }
  bindModalEvents();

  [closeBtn, overlay].forEach(el =>
    el.addEventListener('click', () => modal.classList.add('hidden'))
  );

  // Tag filtering
  const tagButtons = document.querySelectorAll('.tag-filter-btn');
  function bindFiltering(scope = document) {
    const installerItems = scope.querySelectorAll('.grid .item');
    tagButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const selectedTag = btn.dataset.tag;
        installerItems.forEach(item => {
          const tags = Array.from(item.querySelectorAll('.tags .tag')).map(t => t.textContent.trim());
          if (selectedTag === 'all' || tags.includes(selectedTag)) {
            item.style.display = 'block';
          } else {
            item.style.display = 'none';
          }
        });
        tagButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
      });
    });
  }
  bindFiltering();

  // Search filtering
  const searchInput = document.getElementById('installerSearch');
  function bindSearch(scope = document) {
    const installerItems = scope.querySelectorAll('.grid .item');
    searchInput.addEventListener('keyup', () => {
      const query = searchInput.value.toLowerCase();
      installerItems.forEach(item => {
        const title = item.querySelector('.title').textContent.toLowerCase();
        const tags = item.querySelector('.tags').textContent.toLowerCase();
        if (title.includes(query) || tags.includes(query)) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    });
  }
  bindSearch();

  // Load More
  const loadMoreBtn = document.getElementById('loadMore');
  if (loadMoreBtn) {
    loadMoreBtn.addEventListener('click', function () {
      const nextUrl = this.dataset.next;
      this.textContent = 'Loading...';
      fetch(nextUrl)
        .then(res => res.text())
        .then(data => {
          const parser = new DOMParser();
          const htmlDoc = parser.parseFromString(data, 'text/html');
          const newItems = htmlDoc.querySelectorAll('.grid .item');
          const nextButton = htmlDoc.querySelector('#loadMore');
          const grid = document.querySelector('.installers-grid');

          newItems.forEach(item => grid.appendChild(item));

          // Rebind modal, filters, search to new items
          bindModalEvents(grid);
          bindFiltering(grid);
          bindSearch(grid);

          if (nextButton) {
            this.dataset.next = nextButton.dataset.next;
            this.textContent = 'Load More';
          } else {
            this.remove();
          }
        })
        .catch(err => {
          console.error('Load more failed:', err);
          this.textContent = 'Error';
        });
    });
  }
});
</script>
