{% schema %}
{
  "name": "Installers",
  "tag": "section",
  "class": "installers-section",
  "settings": [
    {
      "type": "metaobject_list",
      "metaobject_type": "installers",
      "id": "installers_list",
      "label": "Select Installers"
    }
  ],
  "presets": [
    {
      "name": "Installers",
      "category": "Metaobjects"
    }
  ]
}
{% endschema %}

{{ 'installers.css' | asset_url | stylesheet_tag }}
{{ 'https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/splide.min.css' | stylesheet_tag }}
<script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"></script>

<section class="installer-filters">
  <div class="container">
    <div class="row align-items-center">
      <!-- Tag Filters -->
      <div class="col-md-8">
        <div class="btn-group" role="group" aria-label="Tag filters">
          <button type="button" class="tag-filter-btn active" data-tag="all">All</button>
          {% assign all_tags = "" %}
          {% for item in section.settings.installers_list %}
            {% for tag in item.tags.value %}
              {% unless all_tags contains tag %}
                {% assign all_tags = all_tags | append: tag | append: "," %}
              {% endunless %}
            {% endfor %}
          {% endfor %}
          {% assign unique_tags = all_tags | split: "," | uniq %}
          {% for tag in unique_tags %}
            {% if tag != blank %}
              <button type="button" class="tag-filter-btn" data-tag="{{ tag | escape }}">{{ tag }}</button>
            {% endif %}
          {% endfor %}
        </div>
      </div>

      <!-- Search -->
      <div class="col-md-4">
        <div class="input-group">
          <input type="text" id="installerSearch" class="form-control" placeholder="Search">
        </div>
      </div>

    </div>
  </div>
</section>



<div class="grid grid-cols-3 container">
  {% for item in section.settings.installers_list %}
    <div class="item">
      <div class="featured-img">
        
          <a class="open-modal" 
            data-images='[{% for img in item.gallery.value %}{"src":"{{ img | image_url }}","alt":"{{ img.alt | escape }}" }{% unless forloop.last %},{% endunless %}{% endfor %}]'>
        {{ item.featured_image | image_url: width: item.featured_image.width | image_tag: alt: item.featured_image.alt }}
          </a>
      </div>
      <div class="installer-details">
        <div class="title">{{ item.title }}</div>
        <div class="tags">
          {% for tag in item.tags.value %}
            <span class="tag">{{ tag }}</span>
            {%- unless forloop.last %}, {% endunless %}
          {% endfor %}
        </div>
        <div class="details">
          <ul>
            <li>
              <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/location_on.png?v=1754363429">
              <span>{{ item.address }}</span>
            </li>
            <li>
              <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/user.svg?v=1756295623">
              <span><a href="mailto:{{ item.author }}">{{ item.author }}</a></span>
            </li>
            <li>
              <img src="https://cdn.shopify.com/s/files/1/0936/3328/2419/files/call.png?v=1754363436">
              <span><a href="tel:{{ item.phone }}">{{ item.phone }}</a></span>
            </li>
          </ul>
        </div>
        <div class="cta">
          <a href="/pages/installers/{{ item.title | handleize }}">View large images</a>

        </div>
      </div>
    </div>
  {% endfor %}
</div>

<!-- Modal -->
<div id="installer-modal" class="installer-modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close">&times;</button>
    <div id="installer-splide" class="splide">
      <div class="splide__track">
        <ul class="splide__list"></ul>
      </div>
    </div>
  </div>
</div>

<style>
.installer-modal {
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 999;
}
.installer-modal.hidden { display: none; }
.modal-overlay {
  position: absolute;
  inset: 0;
  background: rgba(0,0,0,0.7);
}
.modal-content {
  position: relative;
  background: #fff;
  padding: 20px;
  max-width: 900px;
  width: 90%;
  border-radius: 10px;
  z-index: 1000;
}
.modal-close {
  position: absolute;
  top: 10px;
  right: 15px;
  background: none;
  border: none;
  font-size: 2rem;
  cursor: pointer;
}
.installer-filters .btn-group button{
  
  background: var(--Colors-Background-bg-primary, #FFF);
  border: 1px solid #C5C5C5;
  padding:16px;
  font-family: Karla;
  font-size: 16px;
  font-style: normal;
  font-weight: 600;
  line-height: normal;
}

.installer-filters .btn-group button.active{
  
    background: #127FB5 !important;
    color: #FFF;
    font-family: Karla;
    font-size: 16px;
    font-style: normal;
    font-weight: 600;
    line-height: normal;

  }
.installer-filters {
  background: #f9f9f9;
  padding: 48px 0px;
  margin-bottom: 20px;
}
.tag-filters button {
  background: #fff;
  border: 1px solid #ccc;
  padding: 6px 15px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}
.tag-filters button.active {
  background: #007bff;
  border-color: #007bff;
  color: #fff;
}
.search-input {
  border: 1px solid #ccc;
  padding: 6px 12px;
  border-radius: 4px;
  font-size: 14px;
}


</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
  // Dropdown filters
  const selectGroups = document.querySelectorAll('.select-group');
  selectGroups.forEach((group) => {
    const button = group.querySelector('button');
    const options = group.querySelector('ul');
    button.addEventListener('click', function (e) {
      e.preventDefault();
      document.querySelectorAll('.select-group ul').forEach((ul) => {
        if (ul !== options) ul.classList.remove('show');
      });
      options.classList.toggle('show');
    });
    options.querySelectorAll('li').forEach((li) => {
      li.addEventListener('click', function () {
        button.childNodes[0].nodeValue = this.textContent;
        options.classList.remove('show');
      });
    });
  });
  document.addEventListener('click', function (e) {
    if (!e.target.closest('.select-group')) {
      document.querySelectorAll('.select-group ul').forEach((ul) => {
        ul.classList.remove('show');
      });
    }
  });

  // Splide modal
  const modal = document.getElementById('installer-modal');
  const closeBtn = modal.querySelector('.modal-close');
  const overlay = modal.querySelector('.modal-overlay');
  const splideList = modal.querySelector('.splide__list');
  let splide;

  document.querySelectorAll('.open-modal').forEach(btn => {
    btn.addEventListener('click', function () {
      const images = JSON.parse(this.dataset.images);
      splideList.innerHTML = '';
      images.forEach(img => {
        splideList.innerHTML += `
          <li class="splide__slide">
            <img src="${img.src}" alt="${img.alt || ''}" />
          </li>`;
      });
      modal.classList.remove('hidden');
      if (splide) splide.destroy();
      splide = new Splide('#installer-splide', {
        type: 'loop',
        perPage: 1,
        pagination: true,
        arrows: true,
      }).mount();
    });
  });

  [closeBtn, overlay].forEach(el =>
    el.addEventListener('click', () => modal.classList.add('hidden'))
  );
 {% comment %}  {% endcomment %}
  // Tag filtering
  const tagButtons = document.querySelectorAll('.tag-filter-btn');
  const installerItems = document.querySelectorAll('.grid .item');

  tagButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const selectedTag = btn.dataset.tag;

      installerItems.forEach(item => {
        const tags = Array.from(item.querySelectorAll('.tags .tag')).map(t => t.textContent.trim());

        if (selectedTag === 'all' || tags.includes(selectedTag)) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });

      // Active state
      tagButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
    });
  });

  // Search filtering
  const searchInput = document.getElementById('installerSearch');
  searchInput.addEventListener('keyup', () => {
    const query = searchInput.value.toLowerCase();
    installerItems.forEach(item => {
      const title = item.querySelector('.title').textContent.toLowerCase();
      const tags = item.querySelector('.tags').textContent.toLowerCase();
      if (title.includes(query) || tags.includes(query)) {
        item.style.display = 'block';
      } else {
        item.style.display = 'none';
      }
    });
  });

});
</script>
