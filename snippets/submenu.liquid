{% style %}
  .submenu{
    position:relative;
    z-index:999;
  }
  .submenu__items,
  .submenu-subitems {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .submenu__items > li,
  .submenu-subitems > li {
    /* position: relative; */
  }

  .style-2 {
    position: absolute;
    top: 0;
    left: 100%;
    background: white;
    min-width: 220px;
    z-index: 10;
    padding:0px;
  }

  .submenu__items > li:hover > .style-2,
  .style-2 .submenu__items > li:hover > .submenu-subitems {
    /* display: block; */
  }

  .submenu-subitems-inner {
    left: 100%;
    top: 0;
  }

  /* Add transition for smoothness */
  .style-2,
  .submenu-subitems,
  .submenu-subitems-inner {
    transition: opacity 0.2s ease, visibility 0.2s ease;
  }
  .uppercase{
    text-transform:uppercase;
  }
  
{% endstyle %}
<submenu>
  <div class="submenu submenu-container container {{ block.id }}" id="{{ block.id }}">
    <div class="row">
                <div class="col-12 col-md-3 item item__1" container-level="1">
            <div class="item__1__group">
              <div class="submenu__heading">
                  <h3 class="heading__1">{{ block.settings.item_label }}</h3>
              </div>
              <ul class="submenu__items lvl-1" >
                {% assign menu_index = (1..15) %}
                {% for i in menu_index %}
                    {% assign label_key = "item-" | append: i | append: "-label" %}
                    {% assign url_key = "item-" | append: i | append: "-url" %}
                    {% assign menu_key = "menu-item-" | append: i %}
                    {% assign additional_label = "item-" | append: i | append: "-additional-label" %}
                  
                    {% assign label = block.settings[label_key] %}
                    {% assign url = block.settings[url_key] %}
                    {% assign menu = block.settings[menu_key] %}
                    {% assign additional_label = block.settings[additional_label] %}
                  {% if label != blank %}
                    <li class="submenu-items-name {% if menu != blank %}submenu-with-children{% endif %}"
                     submenu-order="1"
                     target-id="{{ label }}"
                     submenu-items="{{ menu }}"
                     menu-id="{{ i }}"
                     block-id="{{ block.id }}">
                     <a href="{% if menu != blank %}#{% else %}{{url }}{% endif %}">
                      {{ label }}
                    </a>
                     
                    </li>
                  {% endif %}
                  
                  
                {% endfor %}
            
              </ul>
            </div>
            <div class="special-offers-display"></div>
        </div>
       {% comment %}
         
       {% endcomment %}
     
      <div class="extra-columns-container col-12 col-md-3 item item__1" id="extra-columns-display-container" style="display:none"></div>
       <div id="render-submenus-{{ block.id }}"></div>
       <div id="render-submenus-parent"></div>
    </div>
  </div>
</submenu>
<script>
  window.menuData = window.menuData || {};
  window.menuData["{{ block.id }}"] = {};

  {% assign menu_handles_string = "" %}
  {% assign range = (1..15) %}
  {% for i in range %}
    {% assign key = "menu-item-" | append: i %}
    {% assign handle = block.settings[key] %}
  
    {% if handle != blank %}
      {% if menu_handles_string == "" %}
        {% assign menu_handles_string = handle %}
      {% else %}
        {% assign menu_handles_string = menu_handles_string | append: "," | append: handle %}
      {% endif %}
    {% endif %}
  {% endfor %}

{% assign menu_handles = menu_handles_string | split: "," %}
  {% for menu_handle in menu_handles %}
    window.menuData["{{ block.id }}"]["{{ menu_handle }}"] = {
      title: "{{ menu_handle }}",
      items: [
        {% assign main_menu = linklists[menu_handle] %}
        {% for top_link in main_menu.links %}
          {
            title: "{{ top_link.title | escape }}",
            url: "{{ top_link.url }}",
            children: [
              {% for child_link in top_link.links %}
                {
                  title: "{{ child_link.title | escape }}",
                  url: "{{ child_link.url }}",
                  children: [
                    {% for subchild_link in child_link.links %}
                      {
                        title: "{{ subchild_link.title | escape }}",
                        url: "{{ subchild_link.url }}"
                      }{% unless forloop.last %},{% endunless %}
                    {% endfor %}
                  ]
                }{% unless forloop.last %},{% endunless %}
              {% endfor %}
            ]
          }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ]
    };
  {% endfor %}

</script>


{% javascript %}
document.addEventListener('DOMContentLoaded', () => {
  // mobile
  window.addEventListener("resize", function () {
    if (window.innerWidth <= 768) {
      document.querySelector('.nav-menu').classList.add('hidden')
    } else {
      document.querySelector('.nav-menu').classList.remove('hidden')
    }
  });

  const allMenus = window.menuData;
  Object.entries(allMenus).forEach(([blockId, menus]) => {
    function renderSubmenu(menu) {
      let html = `
        <div class="col-12 col-md-3 item item__2 w-300px level-2 lvl-2" menu-name="${menu.title}-${blockId}" submenu-order="2" container-level="2">
          <div class="item__1__group">
            <div class="submenu__heading heading__1">
              <h3 class="uppercase">${menu.title}</h3>
            </div>
            <ul class="submenu__items level-2 submenu-inner">
      `;
      menu.items.forEach(top => {
        let additionalClass1 = top.children?.length ? "submenu-with-children" : "";
        html += `
          <li class="${additionalClass1}" submenu-order="2">
            <a href="${top.url}">${top.title}</a>
        `;

        if (top.children?.length) {
          html += `
            <div class="submenu-items-container style-2 w-300px lvl-3" submenu-order="3" container-level="3">
              <div class="submenu__heading"><h3>${top.title}</h3></div>
              <ul class="submenu__items item">
          `;

          top.children.forEach(child => {
            let additionalClass = child.children?.length ? "submenu-with-children" : "";
            html += `<li submenu-order="3" class="has-third-level ${additionalClass}"><a href="${child.url}">${child.title}</a>`;

            if (child.children?.length) {
              html += `
                <ul class="style-2 w-300px submenu-items-container lvl-4" submenu-order="4">
                  <div class="submenu__heading"><h3>${child.title}</h3></div>
              `;
              child.children.forEach(sub => {
                html += `<li submenu-order="4" class="menu-item-last-child"><a href="${sub.url}">${sub.title}</a></li>`;
              });
              html += `</ul>`;
            }

            html += `</li>`;
          });

          html += `</ul></div>`;
        }

        html += `</li>`;
      });

      html += `</ul></div></div>`;
      return html;
    }
    let renderedHTML = '';
    Object.values(menus).forEach(menu => {
      renderedHTML += renderSubmenu(menu);
    });
    const container = document.getElementById(`render-submenus-${blockId}`);
      if (container) container.innerHTML = renderedHTML;
    });
  
  const triggerItems = document.querySelectorAll(`.submenu-items-name`);
  const allSubmenus = document.querySelectorAll('.item__2[menu-name]');
  let with5th_lvl = false;
  triggerItems.forEach(trigger => {
    trigger.addEventListener('click', function(e) {
      const menuKey = trigger.getAttribute('submenu-items');
      const block_id = trigger.getAttribute('block-id');
      const menu_id = trigger.getAttribute('menu-id');
      const subMenuContainer = this.closest('.item');
      
      if(subMenuContainer){
        subMenuContainer.classList.remove('hidden')
        if(window.innerWidth <= 768){
          subMenuContainer.classList.add('hidden')
        }
      }
      
      

      // Hide all
      allSubmenus.forEach(sub => {
        sub.style.display = 'none';
      });
      
      let currentItemlvl = 0;
      with5th_lvl = false;
      if(menu_id && document.querySelector(`.extra-columns[menu-id="${menu_id}"]`)){

        with5th_lvl = true;
        document.querySelectorAll('.submenu__items.lvl-1 .submenu-items-name').forEach(i => i.classList.remove('activeMenuItem'));
     
        e.target.classList.add('activeMenuItem');
        if(window.innerWidth <= 768){
          document.querySelector('.row > .item__1').classList.add('hide-main');
        }
        let submenuItem = document.querySelector(`.extra-columns[menu-id="${menu_id}"]`);
        const menuTitle = trigger.getAttribute('target-id');
        submenuItem.setAttribute('menu-title',menuTitle)
        submenuItem.querySelector('.submenu__heading h3').innerHTML = menuTitle;
        resetSubmenuExtra()
        LoadExtraColContainer()
        submenuItem.style.display = "block"
      }else{
        document.querySelector('.row > .item__1').classList.remove('hide-main')
        CloseExtraColContainer()
      }
      // Show only the matched one
      const target = document.querySelector(`.item__2[menu-name="${menuKey}-${block_id}"]`);
      // console.log(target)
      if (target) {
        target.style.display = 'block';
      }
    });
  });
  function LoadExtraColContainer(){
     let extraColumnsOutputDiv = document.getElementById('extra-columns-display-container'); 
     extraColumnsOutputDiv.style.display = "block";
  }
  function CloseExtraColContainer(){
     let extraColumnsOutputDiv = document.getElementById('extra-columns-display-container'); 
     extraColumnsOutputDiv.style.display = "none";
  }
  function resetSubmenuExtra(){
    let extraCols = document.querySelectorAll('div.extra-columns')
    extraCols.forEach((el)=>{
      el.style.display = "none"
    })
  }
  let currentMenuActive = '';
  let isActive = false;
  let menuHistory = [];
  function loadSubmenuItems() {
    allSubmenus.forEach(sub => sub.style.display = 'none');
    
    setTimeout(() => {
      let submenuChildrens = document.querySelectorAll('.submenu-with-children');
      
      submenuChildrens.forEach((item) => {
        item.addEventListener('click', function(e) {
          const subMenuContainer = this.closest('.item');
         
          if (e.target.classList.contains('submenu-items-name')) {
            removeActiveClass();
            e.target.classList.add('activeMenuItem');
          }
          currentMenuActive = e.target.getAttribute('submenu-order');
          if (window.innerWidth <= 768) {
            if (currentMenuActive == 1) {
              // document.querySelector('.item__1').style.display = "none";
            } else if (currentMenuActive == 2) {
              // document.querySelector('.item__1').style.display = "none";
            }
          }else{
            if (currentMenuActive == 3 && with5th_lvl) {
              if(window.innerWidth > 768){
                document.querySelector('.item__1').style.display = "none";  
              }
            }
          }

          ReloadSubmenu(currentMenuActive);
          let submenu = e.target.querySelector('.submenu-items-container');
          if (submenu) {
            submenu.style.display = 'block';
            menuHistory.push(submenu);
          }else{
            menuHistory.push(subMenuContainer);
          }
        
        });
      });
    }, 1000);
  }

  function LoadMenuJs() {
  let menuItems = document.querySelectorAll('.header-group .menu-items-main li');
  menuItems.forEach((item) => {
    if (item.classList.contains('has-sub') && !item.hasAttribute('data-bound')) {
      let menuClass = item.getAttribute('child-menu-id');
      let mainHeader = item.closest('.header-group');
      let submenuElement = mainHeader?.querySelector('.' + menuClass);
      if (menuClass && submenuElement) {
        item.addEventListener('click', function (e) {
         
          const navMenu = this.closest('.nav-menu');
          if(window.innerWidth <= 768){
            if(navMenu){
              console.log('added hidden to');
              console.log(navMenu);
              document.querySelector('.go-back-menu').classList.remove('hidden')
              navMenu.classList.add('hidden')
            }
          }
          // Remove active classes from all menus
          reloadMenuItemsMain(mainHeader);
          isActive = !isActive;
          let submenuEl = document.querySelector('.submenu');
         
          if (submenuEl && !submenuEl.classList.contains('active')) {
              submenuEl.classList.add('active');
          }
          // Activate clicked item and its submenu
          if (window.innerWidth <= 768) {
            document.querySelector('.header-bottom').classList.add('hidden');
          }
          if(isActive){
            item.classList.add('active');
            submenuElement.classList.add('active');
          }else{
            item.classList.remove('active');
            submenuElement.classList.remove('active');
          }
        });
        item.setAttribute('data-bound', 'true');
      }
    }
  });
}

function reloadMenuItemsMain(context) {
  let submenuItems = context.querySelectorAll('.submenu');
  let menuItems = context.querySelectorAll('.has-sub');

  menuItems.forEach((item) => item.classList.remove('active'));
  submenuItems.forEach((submenu) => submenu.classList.remove('active'));
}

  let stickyAdded = false;
  let ActiveClass = false;
  let ElementClonedDetected = false;
  // for sticky header
  function LoadStickyMenuJs() {
    if (document.querySelector('#header-ontop.cloned')) {
      ElementClonedDetected = true;
      let menuItems = document.querySelectorAll('.cloned .header-group .menu-items-main li');
      menuItems.forEach((item) => {
        if (item.classList.contains('has-sub')) {
          let menuClass = item.getAttribute('child-menu-id');
          let mainHeader = document.querySelector('.cloned .header-group');
          let submenuElement = mainHeader?.querySelector('.' + menuClass);
          item.addEventListener('click', function () {
            console.log('clicked cloned');
            if (ActiveClass) {
              submenuElement.classList.remove('active');
              item.classList.remove('active');
              ActiveClass = false;
            } else {
              submenuElement.classList.add('active');
              item.classList.add('active');
              ActiveClass = true;
            }
          });
        }
      });
    }
  }

  const stickyInterval = setInterval(() => {
    if (ElementClonedDetected == true) {
      clearInterval(stickyInterval);
      console.log('Sticky menu initialized and interval cleared.');
    } else {
      LoadStickyMenuJs();
    }
  }, 900);

  LoadMenuJs();

   let main_nav_items = document.querySelectorAll('.mobile-main-header .menu-items-main li');
  main_nav_items.forEach((element) => {
    element.addEventListener('click', function () {
      if (element.getAttribute('child-menu-id') != '') {
        let submenuAttribute = element.getAttribute('child-menu-id');
        document.querySelector(`.mb-header .${submenuAttribute}`).classList.add('active');
      }
    });
  });
  let toggleMenuIcons = document.querySelectorAll('.toggle-menu');
  let menuStatus = false;
  if (window.innerWidth <= 768) {
    document.querySelector('.nav-menu').classList.add('hidden');
  }
  toggleMenuIcons.forEach((el) => {
    el.addEventListener('click', function (e) {
      menuStatus = !menuStatus;
      if(menuStatus){
        document.querySelector('.close-menu').classList.remove('hidden')
        document.querySelector('.open-menu').classList.add('hidden')
        document.querySelector('.nav-menu').classList.remove('hidden')
       
        document.querySelector('.item__1 ').classList.remove('hide-main')
        document.querySelectorAll('.item__1 ').forEach(el => el.classList.remove('hidden'))
      }else{
        console.log('close');
        isActive = false;
        console.log(isActive);
        document.querySelector('.go-back-menu').classList.add('hidden')
        
        // window.location.reload()
        document.querySelectorAll('.lvl-2').forEach(el => el.style.display = "none")
        document.querySelectorAll('.lvl-3').forEach(el => el.style.display = "none")
        document.querySelector('.item__1 ').classList.remove('hide-main')
        document.querySelectorAll('.has-sub').forEach(el => el.classList.remove('active'))
        document.querySelector('.submenu').classList.remove('active')
        document.querySelector('.close-menu').classList.add('hidden')
        document.querySelector('.open-menu').classList.remove('hidden')
        document.querySelector('.nav-menu').classList.add('hidden')
      }
    });
  });
  let closeMenu = document.querySelector('.close-menu');
  closeMenu.addEventListener('click',function(){
    // document.querySelector('.item__1').style.display = "none"
  })
      // Back button logic
    let menuContainer = 0;
    document.querySelector('.back-btn').addEventListener('click', () => {
      console.log("back clicked");
      
      if (menuHistory.length > 0) {
        menuContainer = 0;
        let historyItem = menuHistory[menuHistory.length-1];
        if(historyItem.classList.contains('hide-main')){
          historyItem.classList.remove('hide-main')
        }
        menuHistory[menuHistory.length-1].style.display = 'none'
        menuHistory.pop();
      }else{
        document.querySelector('.submenu').classList.add('active')
        document.querySelector('.item__1').classList.remove('hidden')
        document.querySelector('.item__1').style.display = "block";
        document.querySelectorAll('.item__2').forEach(el=>{
          el.style.display = "none";
        })
      }
     
      
      if(menuHistory.length == 0){
        console.log(menuHistory );
        document.querySelector('.submenu').classList.add('active')
        document.querySelectorAll('.has-sub').forEach(el => el.classList.remove('active'))
        menuContainer++;
        console.log(menuContainer);
        
        if(menuContainer == 3){
          // document.querySelector('.item__1').style.display = "none";
          document.querySelector('.nav-menu').classList.remove('hidden')
        }
      }
    });
  


  loadSubmenuItems();
  function removeActiveClass(){
    let submenuChildrens = document.querySelectorAll('.submenu-items-name');
    submenuChildrens.forEach((item)=>{
       item.classList.remove('activeMenuItem')
    })
  }
  function clearSubmenuActive(exceptItem) {
  submenuChildrens.forEach((item) => {
    if (item !== exceptItem) {
      let submenu = item.querySelector('.submenu-items-container');
      if (submenu) submenu.style.display = 'none';
    }
  });
  }
  function ReloadSubmenu(activeMenu){
     if(activeMenu == '2'){
       hideSubmenuContainer(document.querySelectorAll(".lvl-3"))
       hideSubmenuContainer(document.querySelectorAll(".lvl-4"))
     }
     else if(activeMenu == '3'){
       hideSubmenuContainer(document.querySelectorAll(".lvl-4"))
     }
    else if(activeMenu == '1'){
       // hideSubmenuContainer(document.querySelectorAll(".lvl-2"))
       // hideSubmenuContainer(document.querySelectorAll(".lvl-3"))
       // hideSubmenuContainer(document.querySelectorAll(".lvl-4"))
      
    }else{
      console.log('active undefined')
    }
    }
  function hideSubmenuContainer(Elements){
    Elements.forEach(el => {
          el.style.display = "none";
      });
  }
  AddhoverEffects()
function AddhoverEffects() {
  let liElements = document.querySelectorAll('.submenu .row .item .submenu__items.submenu-inner li');

  liElements.forEach((element) => {
    element.addEventListener('mouseover', function (e) {
      // Remove 'active-list' from all items
      liElements.forEach(el => el.classList.remove('active-list'));

      // Add 'active-list' to the currently hovered item
      e.currentTarget.classList.add('active-list');
    });
  });
}

});

{% endjavascript %}
